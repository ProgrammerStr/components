var APP = (function () {

    'use strict';

    var self = null;

    return {

        Init        : function (config) {

            self = this;

            self.Prototype();

            var id      = null,
                modules = self.Modules;

            for (var module in modules) {

                // try {

                    if (typeof modules[module] === 'object') {

                        if (!modules[module].configuration.ENGAGE) {

                            delete modules[module];

                            continue;
                        }

                        if (typeof modules[module].configuration.ID === 'object') {

                            for (var index in modules[module].configuration.ID) {

                                id = (/^#{1}/).test(modules[module].configuration.ID[index]) ? modules[module].configuration.ID[index].replace('#', '') : modules[module].configuration.ID[index];

                                if (document.body.id === id || id === 'General') {

                                    modules[module].init();
                                }
                            }
                        } else {

                            id = (/^#{1}/).test(modules[module].configuration.ID) ? modules[module].configuration.ID.replace('#', '') : modules[module].configuration.ID;

                            if (document.body.id === id || id === 'General') {

                                modules[module].init();
                            }
                        }
                    }
                // } catch (err) {

                //     console.log(err.stack);
                // }
            }
        },
        Debug       : function (debug) {

            if (!debug) {

                window.console.log = function () {

                    return false;
                };
            }
        },
        Prototype   : function () {

            try {

                if (!window.Element ) {

                    window.Element = function() {};
                };

                if (!Array.prototype.indexOf) {

                    Array.prototype.indexOf = function(obj, start) {

                        for (var i = (start || 0), j = this.length; i < j; i++) {

                            if (this[i] === obj) {

                                return i;
                            }
                        }

                        return -1;
                    };
                }

                if (!Element.prototype.addEventListener) {

                    Element.prototype.addEventListener = function (event, method) {

                        this['on' + event] = method;

                        return this['on' + event];
                    };
                }

                if (!document.getElementsByClassName) {

                    document.getElementsByClassName = function (element) {

                        return this.querySelectorAll('.' + element);
                    };
                }

                if (!Object.assign) {

                    Object.prototype.assign = function (obj1, obj2) {

                        for (var index in obj2) {

                            obj1[index] = obj2[index];
                        }
                    };
                }

                if (!Element.classList) {

                    var regExp = function(name) {
                        return new RegExp('(^| )'+ name +'( |$)');
                    };
                    var forEach = function(list, fn, scope) {
                        for (var i = 0; i < list.length; i++) {
                            fn.call(scope, list[i]);
                        }
                    };

                    var ClassList = function (element) {
                        this.element = element;
                    };

                    ClassList.prototype = {
                        add: function() {
                            forEach(arguments, function(name) {
                                if (!this.contains(name)) {
                                    this.element.className += this.element.className.length > 0 ? ' ' + name : name;
                                }
                            }, this);
                        },
                        remove: function() {
                            forEach(arguments, function(name) {
                                this.element.className =
                                    this.element.className.replace(regExp(name), '');
                            }, this);
                        },
                        toggle: function(name) {
                            return this.contains(name)
                                ? (this.remove(name), false) : (this.add(name), true);
                        },
                        contains: function(name) {
                            return regExp(name).test(this.element.className);
                        },
                        // bonus..
                        replace: function(oldName, newName) {
                            this.remove(oldName), this.add(newName);
                        }
                    };

                    // IE8/9, Safari
                    if (!('classList' in Element.prototype)) {
                        Object.defineProperty(Element.prototype, 'classList', {
                            get: function() {
                                return new ClassList(this);
                            }
                        });
                    }

                    // replace() support for others
                    if (window.DOMTokenList && DOMTokenList.prototype.replace == null) {
                        DOMTokenList.prototype.replace = ClassList.prototype.replace;
                    }
                }
            } catch (err) {

                console.log(err);
            }

        },
        Modules     : {}
    };

}());
// COMPONENTE JSON-OFFERS 2.0
// CODE BY GABRIEL PADUA |C#D&R STR@G&|
// FRAMEWORK - BRUNO SAMPAIO

// INIT MODULE
APP.Modules.jsonOffers = (function (app, Private, Public) {

    'use strict';

    Private = {
        skull : document.querySelector("#offersHome .content ul.list-products"),
    };

    Public = {
        configuration : {
            ID     :  'Home',
            NAME   :  'JsonOffers',
            ENGAGE : true
        }
    };

    // INIT 
    Public.init = function() {
        var array = Private.getJsonArray();

        if(array) {
            Private.renderArray();  
        } 

        return true;
    };

    // GET AND VERIFY IF EXIST THE OBJECT
    Private.getJsonArray = function() {
        if(typeof jsonArrayOffers === 'object') {
            return jsonArrayOffers;
        } else {
            return false;
        }
    };

    // VERIFY THE SIZE OF THE ARRAY
    Private.renderArray = function() {

        let qtdOffers = Private.getJsonArray();

        if(qtdOffers.length >= 6 && qtdOffers.length < 8 || qtdOffers.lenght <=3) {
            Private.createJsonOffers('of6');
        } else {
            Private.createJsonOffers('of8');
        }

        return false;

    };

    // CREATES THE SHELF OF OFFERS
    Private.createJsonOffers = function(shelfSize) {

        Private.skull.classList.add(shelfSize);
        let array = Private.getJsonArray();

        array.forEach(function(element) {
            let li = document.createElement('li');
            let a  = document.createElement('a');
            a.setAttribute('href', element.link);
            a.setAttribute('title', element.name);
            let figure = document.createElement('figure');
            let figcaption = document.createElement('figcaption');


            let bloco01 = document.createElement('div');
            bloco01.setAttribute('class', 'box02');
            let boxtitle = document.createElement('div');
            boxtitle.setAttribute('class', 'boxtitle');
            let name = document.createElement('span');
            name.textContent = element.name;

            boxtitle.appendChild(name);
            bloco01.appendChild(boxtitle);

            let bloco02 = document.createElement('div');
            bloco02.setAttribute('class', 'box02');
            let boxPrice = document.createElement('div');
            boxPrice.setAttribute('class', 'boxPrice');
            let top = document.createElement('span');
            top.setAttribute('class', 'top');
            top.textContent = element.priceTop;
            let middle = document.createElement('div');
            middle.setAttribute('class', 'middle');
            let coin = document.createElement('span');
            coin.setAttribute('class', 'coin');
            coin.textContent = element.coin;
            let price = document.createElement('span');
            price.setAttribute('class', 'price');
            price.textContent = element.price;
            let cents = document.createElement('span');
            cents.setAttribute('class', 'cents');
            cents.textContent = element.cents;
            let down = document.createElement('span');
            down.setAttribute('class', 'down');
            down.textContent = element.priceDown;

            middle.appendChild(coin);
            middle.appendChild(price);
            middle.appendChild(cents);
            boxPrice.appendChild(top);
            boxPrice.appendChild(middle);
            boxPrice.appendChild(down);
            bloco02.appendChild(boxPrice);
            


            let divImg = document.createElement('div');
            divImg.setAttribute('class', 'img');
            let img = document.createElement('img');
            img.setAttribute('src', element.img);
            img.setAttribute('title', element.name);
            divImg.appendChild(img);

            figcaption.appendChild(bloco01);
            figcaption.appendChild(bloco02);
            figure.appendChild(figcaption);
            figure.appendChild(divImg);
            a.appendChild(figure);
            li.appendChild(a);

            Private.skull.appendChild(li);

        });

    };


    return Public;


}(APP, {}, {}));
(function (app) {
    'use strict';

    /*
     * DEBUG PARA O CONSOLE
    **/
    app.Debug(true);
    /*
     * INICIALIZANDO MODULOS
    **/
    app.Init({
        modules : app.Modules
    });
}(APP));
